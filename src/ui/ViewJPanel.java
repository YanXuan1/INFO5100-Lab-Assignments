/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarList;

/**
 *
 * @author dellpc
 */
public class ViewJPanel extends javax.swing.JPanel {

    CarList carList;
    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel(CarList carList) {
        initComponents();
        this.carList = carList;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbCarList = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        comboBoxChoose = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        lblSeats = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        txtSeats = new javax.swing.JTextField();
        txtSN = new javax.swing.JTextField();
        txtMN = new javax.swing.JTextField();
        txtManu = new javax.swing.JTextField();
        lblModelNumber = new javax.swing.JLabel();
        lblSerialNumber = new javax.swing.JLabel();
        lblManufacturer = new javax.swing.JLabel();
        checkBoxIsUseble = new javax.swing.JCheckBox();
        checkBoxIsOutdated = new javax.swing.JCheckBox();
        lblIsUseble = new javax.swing.JLabel();
        lblIsUpdated = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        lblCountUseble = new javax.swing.JLabel();
        txtCountUseble = new javax.swing.JTextField();
        lblCountUnuseble = new javax.swing.JLabel();
        txtCountUnuseble = new javax.swing.JTextField();

        setBackground(new java.awt.Color(224, 246, 250));

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("微软雅黑", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(51, 153, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View");

        tbCarList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "BuildDate", "Seats", "SerialNum", "ModelNum", "Location", "Manufacturer", "IsUseble", "IsOutdated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbCarList);

        lblSearch.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblSearch.setText("Search by");

        comboBoxChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "null", "Useble", "Brand", "Year", "Seats", "SerialNumber", "ModelNumber", "City", "IsOutdated", "Manufacturer" }));
        comboBoxChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxChooseActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(153, 204, 255));
        btnSearch.setFont(new java.awt.Font("微软雅黑", 2, 15)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(153, 204, 255));
        btnDelete.setFont(new java.awt.Font("微软雅黑", 2, 15)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(153, 204, 255));
        btnView.setFont(new java.awt.Font("微软雅黑", 2, 15)); // NOI18N
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblSeats.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblSeats.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSeats.setText("Seats:");

        lblYear.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYear.setText("BuildYear:");

        lblBrand.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblBrand.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBrand.setText("Brand:");

        txtMN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMNActionPerformed(evt);
            }
        });

        lblModelNumber.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblModelNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblModelNumber.setText("ModelNumber:");

        lblSerialNumber.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblSerialNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSerialNumber.setText("SerialNumber:");

        lblManufacturer.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblManufacturer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblManufacturer.setText("Manufacturer:");

        lblIsUseble.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblIsUseble.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIsUseble.setText("IsUseble:");

        lblIsUpdated.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblIsUpdated.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIsUpdated.setText("IsOutdated:");

        btnSave.setBackground(new java.awt.Color(153, 204, 255));
        btnSave.setFont(new java.awt.Font("微软雅黑", 2, 15)); // NOI18N
        btnSave.setText("Save Changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblTime.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblTime.setText("Last updated time:");

        lblCity.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCity.setText("City:");

        lblCountUseble.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblCountUseble.setText("Useble:");

        lblCountUnuseble.setFont(new java.awt.Font("微软雅黑", 2, 18)); // NOI18N
        lblCountUnuseble.setText("Unuseble:");

        txtCountUnuseble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCountUnusebleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblCountUseble, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(txtCountUseble, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblCountUnuseble, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCountUnuseble, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(347, 347, 347)
                                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtSeats)
                                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIsUseble, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxIsUseble)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIsUpdated)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxIsOutdated)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSN)
                                    .addComponent(txtMN)
                                    .addComponent(txtManu, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCity)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTitle)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(comboBoxChoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(lblTime)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete)
                    .addComponent(lblCountUseble)
                    .addComponent(txtCountUseble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCountUnuseble)
                    .addComponent(txtCountUnuseble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSerialNumber)
                            .addComponent(txtSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblModelNumber)
                            .addComponent(txtMN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturer)
                            .addComponent(txtManu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBrand)
                            .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblYear)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSeats)
                            .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblIsUpdated)
                                .addComponent(checkBoxIsOutdated))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCity)
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxIsUseble)
                            .addComponent(lblIsUseble))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tbCarList.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete!");
            return;
        }
        
        Car car = carList.getItem(selectedRowIndex);
        carList.setSerialList(carList.deleteSN(car.getSerialNumber()));
        carList.deleteCar(car);
        
        JOptionPane.showMessageDialog(this, "Vital Signs deleted!");
        populateTable();
        
        txtBrand.setText("");
        txtCity.setText("");
        txtMN.setText("");
        txtManu.setText("");
        txtSN.setText("");
        txtSeats.setText("");
        txtYear.setText("");
        checkBoxIsUseble.setSelected(false);
        checkBoxIsOutdated.setSelected(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tbCarList.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to view!");
            return;
        }
        
        Car car = carList.getItem(selectedRowIndex);
        txtBrand.setText(car.getBrand());
        txtYear.setText(car.getBuildDate());
        txtSeats.setText(String.valueOf(car.getSeats()));
        txtSN.setText(car.getSerialNumber());
        txtMN.setText(car.getModelNumber());
        txtCity.setText(car.getCity());
        txtManu.setText(car.getManufacturer());
        checkBoxIsUseble.setSelected(car.isIsUseble());
        checkBoxIsOutdated.setSelected(car.isIsOutdated());
    }//GEN-LAST:event_btnViewActionPerformed

    private void populateTable() {
        int countUseble = 0;
        int countUnuseble = 0;
        DefaultTableModel model = (DefaultTableModel)tbCarList.getModel();
        model.setRowCount(0);
        for(Car car : carList.getCarList()){
            Object[] row = new Object[9];
            row[0] = car.getBrand();
            row[1] = car.getBuildDate();
            row[2] = car.getSeats();
            row[3] = car.getSerialNumber();
            row[4] = car.getModelNumber();
            row[5] = car.getCity();
            row[6] = car.getManufacturer();
            row[7] = car.isIsUseble();
            row[8] = car.isIsOutdated();
            if(car.isIsUseble() == true){
                countUseble++;
            }else{
                countUnuseble++;
            }
            model.addRow(row);
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd hh:mm:ss a E");
	String strtime = sdf.format(new Date());
        txtTime.setText(strtime);
        
        txtCountUseble.setText(String.valueOf(countUseble));
        txtCountUnuseble.setText(String.valueOf(countUnuseble));
    }
    
    private void txtMNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMNActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tbCarList.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to change!");
            return;
        }
//        String brand = txtBrand.getText();
//        String buildDate = txtYear.getText();
//        int seats = Integer.parseInt(txtSeats.getText());
//        String serialNumber = txtSN.getText();
//        boolean isUseble = checkBoxIsUseble.isSelected();
//        String modelNumber = txtMN.getText();
//        String city = txtCity.getText();
//        boolean isOutdated = checkBoxIsOutdated.isSelected();
//        String manufacturer = txtManu.getText();
//        carList.getItem(selectedRowIndex).setBrand(brand);
//        carList.getItem(selectedRowIndex).setBuildDate(buildDate);
//        carList.getItem(selectedRowIndex).setCity(city);
//        carList.getItem(selectedRowIndex).setIsOutdated(isOutdated);
//        carList.getItem(selectedRowIndex).setIsUseble(isUseble);
//        carList.getItem(selectedRowIndex).setManufacturer(manufacturer);
//        carList.getItem(selectedRowIndex).setModelNumber(modelNumber);
//        carList.getItem(selectedRowIndex).setSeats(seats);
//        carList.getItem(selectedRowIndex).setSerialNumber(serialNumber);

        Car car = carList.getItem(selectedRowIndex);

        String brand = txtBrand.getText();
        String buildDate = txtYear.getText();
        
        int seats = 0;
        String serialNumber = txtSN.getText();
        boolean isUseble = checkBoxIsUseble.isSelected();
        String modelNumber = txtMN.getText();
        String city = txtCity.getText();
        boolean isOutdated = checkBoxIsOutdated.isSelected();
        String manufacturer = txtManu.getText();
        
        
        boolean key = false;
        if(!txtBrand.getText().equals("")){
            carList.getItem(selectedRowIndex).setBrand(brand);
           key = true;
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"Brand should not be null!");
        }
        
        boolean result = false;
        if(!buildDate.equals("")){
            String eL = "^((\\d{2}(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))"; 
            Pattern p = Pattern.compile(eL);
            Matcher m = p.matcher(buildDate);
            result = m.matches();
            if(result){
                carList.getItem(selectedRowIndex).setBuildDate(buildDate);
                
            }else{
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct BuildDate like YYYY-MM-DD!");
            }
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"BuildDate should not be null!");
        }
        
        boolean key2 = false;
        if(!city.equals("")){
            carList.getItem(selectedRowIndex).setCity(city);
            key2 = true;
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"Located City should not be null!");
        }
        
        carList.getItem(selectedRowIndex).setIsOutdated(isOutdated);
        carList.getItem(selectedRowIndex).setIsUseble(isUseble);
        
        boolean key3 = false;
        if(!manufacturer.equals("")){
            carList.getItem(selectedRowIndex).setManufacturer(manufacturer);
            key3 = true;
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"Manufacturer should not be null!");
        }
        
        boolean key4 = false;
        if(!modelNumber.equals("")){
            carList.getItem(selectedRowIndex).setModelNumber(modelNumber);
            key4 = true;
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"ModelNumber should not be null!");
        }
        
        Pattern pattern = Pattern.compile("^-?[0-9]+");
        Matcher isNum = pattern.matcher(txtSeats.getText());
        boolean key5 = false;
        if(isNum.matches()){
            seats = Integer.parseInt(txtSeats.getText());
            if(seats <= 0 || seats > 61){           
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct number of seats!");
            }else{
                carList.getItem(selectedRowIndex).setSeats(seats);
                key5 = true;
            }
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"Number of seats should not be null!");
        }
        
        
        
        String regex ="(?i)^(?!([a-z]*|\\d*)$)[a-z\\d]+$";    
        boolean ju = false;
        if(!carList.isOnlySN(serialNumber)) carList.setSerialList(carList.deleteSN(serialNumber));
        if(serialNumber.length() == 17 && serialNumber.matches(regex) && carList.isOnlySN(serialNumber)){
            carList.getItem(selectedRowIndex).setSerialNumber(serialNumber);
            carList.setSerialList(carList.addSN(serialNumber));
            ju = true;
        }else{
            JOptionPane.showMessageDialog(new JDialog(),"Please input the correct SerialNumber or the SreialNumber already exists!");
        }
        
        
        if(key && key2 && key3 && key4 && ju && result && serialNumber.matches(regex) && key5){
            JOptionPane.showMessageDialog(this, "New Car Information saved !");
            txtBrand.setText("");
            txtCity.setText("");
            txtMN.setText("");
            txtManu.setText("");
            txtSN.setText("");
            txtSeats.setText("");
            txtYear.setText("");
            checkBoxIsUseble.setSelected(false);
            checkBoxIsOutdated.setSelected(false);
        
            populateTable();
        }else{
            carList.getItem(selectedRowIndex).setBrand(car.getBrand());
            carList.getItem(selectedRowIndex).setBuildDate(car.getBuildDate());
            carList.getItem(selectedRowIndex).setCity(car.getCity());
            carList.getItem(selectedRowIndex).setIsOutdated(car.isIsOutdated());
            carList.getItem(selectedRowIndex).setIsUseble(car.isIsUseble());
            carList.getItem(selectedRowIndex).setManufacturer(car.getManufacturer());
            carList.getItem(selectedRowIndex).setModelNumber(car.getModelNumber());
            carList.getItem(selectedRowIndex).setSeats(car.getSeats());
            carList.getItem(selectedRowIndex).setSerialNumber(car.getSerialNumber());
            JOptionPane.showMessageDialog(new JDialog(),"Failed to change a new car! Try it again!");
        }
  
    }//GEN-LAST:event_btnSaveActionPerformed

    private void populateAccording(){
        String str = (String) comboBoxChoose.getSelectedItem();
        if(str == null){
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tbCarList.getModel();
        model.setRowCount(0);
        //if(str.equals("Useble")){
            ArrayList<Car> list = carList.searchByUseble();
            for(Car car : list){
                Object[] row = new Object[9];
                row[0] = car.getBrand();
                row[1] = car.getBuildDate();
                row[2] = car.getSeats();
                row[3] = car.getSerialNumber();
                row[4] = car.getModelNumber();
                row[5] = car.getCity();
                row[6] = car.getManufacturer();
                row[7] = car.isIsUseble();
                row[8] = car.isIsOutdated();
            
            model.addRow(row);
        //    }
        }
    }
    
    private void comboBoxChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxChooseActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboBoxChooseActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String str = (String) comboBoxChoose.getSelectedItem();
        if(str.equals("null")){
             DefaultTableModel model = (DefaultTableModel)tbCarList.getModel();
             model.setRowCount(0);
             for(Car car : carList.getCarList()){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                    model.addRow(row);
                 }
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel)tbCarList.getModel();
        model.setRowCount(0);
        if(str.equals("Manufacturer")){
            ArrayList<String> list = carList.findManu();
            if(list.size() == 0){
                JOptionPane.showMessageDialog(new JDialog(),"No Manufacturers!");
                return;
            }else{
                for(String item : list){
                    Object[] row = new Object[9];
                    row[6] = item;
                    model.addRow(row);
                }
            }
        }
        
        if(txtSearch.getText().equals("") && !str.equals("Manufacturer")){
            JOptionPane.showMessageDialog(new JDialog(),"Can't search if it is empty!");
            comboBoxChoose.setSelectedItem("null");
            return;
        }
        
        
        
        if(str.equals("Useble")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input Y or N to search for useble cars!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            if(txtSearch.getText().substring(0, 1).equals("Y") || txtSearch.getText().substring(0, 1).equals("y")){
                ArrayList<Car> list = carList.searchByUseble();
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }else if(txtSearch.getText().substring(0, 1).equals("N") || txtSearch.getText().substring(0, 1).equals("n")){
                ArrayList<Car> list = carList.searchByUnuseble();
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }
            
        }
        
        if(str.equals("Brand")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the brand's name!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            ArrayList<String> brands = carList.findBrands();
            if(brands.contains(txtSearch.getText())){
                ArrayList<Car> list = carList.searchByBrand(txtSearch.getText());
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }else if(!brands.contains(txtSearch.getText())){
                JOptionPane.showMessageDialog(new JDialog(),"The brand doesn't exist!");
                return;
            }
            
        }
        
        if(str.equals("Year")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the year!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            ArrayList<String> years = carList.findYear();
            if(years.contains(txtSearch.getText().substring(0, 4))){
                ArrayList<Car> list = carList.searchByYear(txtSearch.getText().substring(0, 4));
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }else if(!years.contains(txtSearch.getText())){
                JOptionPane.showMessageDialog(new JDialog(),"The year doesn't exist!");
                return;
            }
            
        }
        
        if(str.equals("Seats")){
            String min = null;
            String max = null;
            int index = 0;
            for(int i = 0; i<txtSearch.getText().length();i++){
                if(txtSearch.getText().charAt(i) == '-'){
                    index = i;
                    break;
                }
            }
            if(index == 0 || index == txtSearch.getText().length() - 1){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the seats number as AA-BB!");
                return;
            }
            min = txtSearch.getText().substring(0, index);
            max = txtSearch.getText().substring(index + 1, txtSearch.getText().length());
            
            int min1 = Integer.parseInt(min);
            int max1 = Integer.parseInt(max);
            if(min1 > max1){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct seats number as AA-BB!");
                return;
            }
            ArrayList<Car> list = carList.searchBySeats(min1, max1);
            if(list.size() == 0){
                JOptionPane.showMessageDialog(new JDialog(),"All cars don't have the number of seats!");
                return;
            }else{
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }
        }
        
        if(str.equals("SerialNumber")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct SerialNumber!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            int count = 0;
            for(Car car : carList.getCarList()){
                if(car.getSerialNumber().equals(txtSearch.getText())){                   
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                   count++;
                   break;
                }
            }
            if(count == 0){
                JOptionPane.showMessageDialog(new JDialog(),"Can't find the car with this given SerialNumber!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
        }
        
        if(str.equals("ModelNumber")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct ModelNumber!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            ArrayList<Car> list = carList.findModelNumber(txtSearch.getText());
            if(list.size() == 0){
                JOptionPane.showMessageDialog(new JDialog(),"Can't find cars with this ModelNumber!");
                return;
            }else{
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }
        }
        
        if(str.equals("City")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input the correct City name!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            ArrayList<Car> list = carList.searchByCity(txtSearch.getText());
            if(list.size() == 0){
                JOptionPane.showMessageDialog(new JDialog(),"No are is useble in this city!");
                return;
            }else{
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }
        }
        
        if(str.equals("IsOutdated")){
            if(txtSearch.getText().equals("")){
                JOptionPane.showMessageDialog(new JDialog(),"Please input Y or N to search for outdated cars!");
                comboBoxChoose.setSelectedItem("null");
                //model.setRowCount(0);
                
                return;
            }
            if(txtSearch.getText().substring(0, 1).equals("Y") || txtSearch.getText().substring(0, 1).equals("y")){
                ArrayList<Car> list = carList.searchByOutdated();
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }else if(txtSearch.getText().substring(0, 1).equals("N") || txtSearch.getText().substring(0, 1).equals("n")){
                ArrayList<Car> list = carList.searchByNotOutdated();
                for(Car car : list){
                    Object[] row = new Object[9];
                    row[0] = car.getBrand();
                    row[1] = car.getBuildDate();
                    row[2] = car.getSeats();
                    row[3] = car.getSerialNumber();
                    row[4] = car.getModelNumber();
                    row[5] = car.getCity();
                    row[6] = car.getManufacturer();
                    row[7] = car.isIsUseble();
                    row[8] = car.isIsOutdated();
            
                   model.addRow(row);
                }
            }
        }
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtCountUnusebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCountUnusebleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCountUnusebleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox checkBoxIsOutdated;
    private javax.swing.JCheckBox checkBoxIsUseble;
    private javax.swing.JComboBox<String> comboBoxChoose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCountUnuseble;
    private javax.swing.JLabel lblCountUseble;
    private javax.swing.JLabel lblIsUpdated;
    private javax.swing.JLabel lblIsUseble;
    private javax.swing.JLabel lblManufacturer;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblSerialNumber;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTable tbCarList;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCountUnuseble;
    private javax.swing.JTextField txtCountUseble;
    private javax.swing.JTextField txtMN;
    private javax.swing.JTextField txtManu;
    private javax.swing.JTextField txtSN;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSeats;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
